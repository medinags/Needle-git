var d=Object.defineProperty;var m=(i,t,e)=>t in i?d(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var a=(i,t,e)=>(m(i,typeof t!="symbol"?t+"":t,e),e);import{serializable as h,Behaviour as c,TypeStore as l}from"./needle-engine-4fe9a891.js";import"./three.module-1012b49f.js";import"./index-53b8dd76.js";var O=Object.defineProperty,b=Object.getOwnPropertyDescriptor,f=(i,t,e,r)=>{for(var o=r>1?void 0:r?b(t,e):t,s=i.length-1,n;s>=0;s--)(n=i[s])&&(o=(r?n(t,e,o):n(o))||o);return r&&o&&O(t,e,o),o};class p extends c{constructor(){super(...arguments);a(this,"rotationSpeed",5)}update(){this.gameObject.rotateY(this.context.time.deltaTime*this.rotationSpeed)}}f([h()],p.prototype,"rotationSpeed",2);class g extends c{constructor(){super(...arguments);a(this,"rotationEndTime",0);a(this,"targetObject",null)}update(){var r;const e=this.context.time.time;if(this.context.input.getPointerDown(0)){const o=(r=this.context.physics.engine)==null?void 0:r.raycast();o&&(this.targetObject=o.collider.gameObject,this.rotationEndTime=e+5)}this.targetObject&&e<this.rotationEndTime&&this.targetObject.rotateY(this.context.time.deltaTime)}}l.add("HelloNeedle",p);l.add("XRARaycast",g);
